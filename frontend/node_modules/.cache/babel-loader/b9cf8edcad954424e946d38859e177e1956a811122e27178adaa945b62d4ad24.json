{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Joel Mathew\\\\Desktop\\\\barber-appt\\\\frontend\\\\src\\\\components\\\\AuthContext\\\\AuthContext.js\",\n  _s = $RefreshSig$();\n// AuthContext.js\nimport React, { createContext, useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nconst AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  useEffect(() => {\n    // Check if JWT token exists in local storage on page load\n    const token = localStorage.getItem(\"token\");\n    if (token) {\n      setIsLoggedIn(true); // Set isLoggedIn to true if token exists\n    }\n  }, []);\n  const logout = () => {\n    localStorage.removeItem(\"token\"); // Remove token from local storage\n    setIsLoggedIn(false); // Set isLoggedIn to false\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isLoggedIn,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"fKLMlyFH2GMrhNeUDpp+0z1yiCo=\");\n_c = AuthProvider;\nexport { AuthProvider, AuthContext };\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","isLoggedIn","setIsLoggedIn","token","localStorage","getItem","logout","removeItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Joel Mathew/Desktop/barber-appt/frontend/src/components/AuthContext/AuthContext.js"],"sourcesContent":["// AuthContext.js\r\nimport React, { createContext, useState, useEffect } from \"react\";\r\n\r\nconst AuthContext = createContext();\r\n\r\nconst AuthProvider = ({ children }) => {\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // Check if JWT token exists in local storage on page load\r\n    const token = localStorage.getItem(\"token\");\r\n    if (token) {\r\n      setIsLoggedIn(true); // Set isLoggedIn to true if token exists\r\n    }\r\n  }, []);\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem(\"token\"); // Remove token from local storage\r\n    setIsLoggedIn(false); // Set isLoggedIn to false\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ isLoggedIn, logout }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport { AuthProvider, AuthContext };\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElE,MAAMC,WAAW,gBAAGL,aAAa,CAAC,CAAC;AAEnC,MAAMM,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACrC,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAEnDC,SAAS,CAAC,MAAM;IACd;IACA,MAAMS,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAIF,KAAK,EAAE;MACTD,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;IACvB;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMI,MAAM,GAAGA,CAAA,KAAM;IACnBF,YAAY,CAACG,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC;IAClCL,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;EACxB,CAAC;EAED,oBACEN,OAAA,CAACC,WAAW,CAACW,QAAQ;IAACC,KAAK,EAAE;MAAER,UAAU;MAAEK;IAAO,CAAE;IAAAP,QAAA,EACjDA;EAAQ;IAAAW,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACb,EAAA,CArBIF,YAAY;AAAAgB,EAAA,GAAZhB,YAAY;AAuBlB,SAASA,YAAY,EAAED,WAAW;AAAG,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}